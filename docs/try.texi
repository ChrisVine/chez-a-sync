@node try,,meeting,Top

This (a-sync try) library file provides a 'try' macro for dealing with
exceptions.

@deffn {Syntax} (try body0 body1 ... (except condition cond-clause0 cond-clause1 ...))
Try is a macro used in the implementation of the event loop provided
by this library, and is exported in case it is useful to users.  The
macro has two keywords, 'try' and 'except'.  It executes the body
clauses, and if an exception is raised by them passes control to the
'except' block with 'condition' set to the condition which was raised.
The cond-clauses are then evaluated as if in a cond expression.  If
one of the cond tests is found to be true, or there is none found to
be true but there is an else clause, then the relevant cond clause or
else clause will be evaluated and returned.  If none of the cond tests
in the cond-clauses is found to be true and there is no else clause,
the exception condition will be re-raised as if by raise, for a
dynamically enclosing try form, guard form or with-exception-handler
form (if any) to handle.

The return value of try, if there is no exception raised by the body
clauses or any exception raised is handled by a cond-clause, is the
value of the last expression of the body clauses or of the
cond-clause, as the case may be.

This is similar to but not the same as the R6RS 'guard' form.  The
guard form has the property that if no cond test is found to be true
in the cond clauses and there is no else clause, the exception
condition will be re-raised with raise-continuable.  This is to allow
continuable exceptions to propagate successfully through a 'guard'
form (albeit triggering any dynamic winds in doing so).  A further
consequence is that when the condition is re-raised, that is done in
the dynamic environment of the original call to raise or
raise-continuable.  As mentioned, the 'try' form always re-raises with
'raise' (so in effect converting any continuable exception to a
non-continuable one), and it does so in the dynamic environment in
which the cond-clauses are evaluated, which is the dynamic environment
of the original call to 'try'.

Or put another way, the 'try' macro behaves like a conventional stack
unwinding exception implementation.  'guard' does not necessarily do
so.

Continuable exceptions with generalised handling forms such as 'guard'
are generally to be avoided, as they may break any intermediate
resource management which uses rethrows or dynamic winds.  Continuable
exceptions are also usually unsuitable for use with asynchronous event
handlers, which is why the 'try' form is used in the implementation of
the event loop provided by this library.  But for cases where that is
not true and you know what you are doing, you can use 'guard' instead
of 'try' for maintaining continuable exceptions as continuable.

The 'try' macro is first available in version 0.3 of this library.

Here is an example of the use of try:
@example
(display (try (display "In outer try form\n")
	      (try (display "In inner try form\n")
		   (raise 'five)
		   (except c
			   [(eq? c 'six) 6]))
	      (except c
		      [(eq? c 'five) 5])))
@end example
@end deffn
